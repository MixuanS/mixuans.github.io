<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://mixuans.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Jul 2019 23:27:22 +0800</lastBuildDate>
    
	<atom:link href="https://mixuans.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Test</title>
      <link>https://mixuans.github.io/post/test/</link>
      <pubDate>Wed, 10 Jul 2019 23:27:22 +0800</pubDate>
      
      <guid>https://mixuans.github.io/post/test/</guid>
      <description>这个另一篇测试博客</description>
    </item>
    
    <item>
      <title>我的第一篇博客</title>
      <link>https://mixuans.github.io/post/blog/</link>
      <pubDate>Wed, 10 Jul 2019 13:06:46 +0800</pubDate>
      
      <guid>https://mixuans.github.io/post/blog/</guid>
      <description>0.学习目标  了解系统架构的演变 了解RPC与Http的区别 掌握HttpClient的简单使用 知道什么是SpringCloud 独立搭建Eureka注册中心 独立配置Robbin负载均衡  -Xms128m -Xmx128m
1.系统架构演变 随着互联网的发展，网站应用的规模不断扩大。需求的激增，带来的是技术上的压力。系统架构也因此也不断的演进、升级、迭代。从单一应用，到垂直拆分，到分布式服务，到SOA，以及现在火热的微服务架构，还有在Google带领下来势汹涌的Service Mesh。我们到底是该乘坐微服务的船只驶向远方，还是偏安一隅得过且过？
其实生活不止眼前的苟且，还有诗和远方。所以我们今天就回顾历史，看一看系统架构演变的历程；把握现在，学习现在最火的技术架构；展望未来，争取成为一名优秀的Java工程师。
1.1. 集中式架构 当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是影响项目开发的关键。
存在的问题：
 代码耦合，开发维护困难 无法针对不同模块进行针对性优化 无法水平扩展 单点容错率低，并发能力差  1.2.垂直拆分 当访问量逐渐增大，单一应用无法满足需求，此时为了应对更高的并发和业务需求，我们根据业务功能对系统进行拆分：
优点：
 系统拆分实现了流量分担，解决了并发问题 可以针对不同模块进行优化 方便水平扩展，负载均衡，容错率提高  缺点：
 系统间相互独立，会有很多重复开发工作，影响开发效率  1.3.分布式服务 当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式调用是关键。
优点：
 将基础服务进行了抽取，系统间相互调用，提高了代码复用和开发效率  缺点：
 系统间耦合度变高，调用关系错综复杂，难以维护  1.4.服务治理（SOA） 当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键
以前出现了什么问题？
 服务越来越多，需要管理每个服务的地址 调用关系错综复杂，难以理清依赖关系 服务过多，服务状态难以管理，无法根据服务情况动态管理  服务治理要做什么？
 服务注册中心，实现服务自动注册和发现，无需人为记录服务地址 服务自动订阅，服务列表自动推送，服务调用透明化，无需关心依赖关系 动态监控服务状态监控报告，人为控制服务状态  缺点：
 服务间会有依赖关系，一旦某个环节出错会影响较大 服务关系复杂，运维、测试部署困难，不符合DevOps思想  1.5.微服务 前面说的SOA，英文翻译过来是面向服务。微服务，似乎也是服务，都是对系统进行拆分。因此两者非常容易混淆，但其实缺有一些差别：
微服务的特点：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mixuans.github.io/post/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mixuans.github.io/post/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>安装Hugo Hugo下载地址
下载完成后,将解压的文件放到指定目录下
配置window环境变量
启动cmd,使用hugo version
使用Hugo来生成博客 这条命令是在当前路径,生成一个myblog文件夹
hugo new site myblog  文件夹中的内容如下:
下载并设置主题 官网主题库
任意选择一个主题,进入
执行克隆命令,成功导入主题
此时主题文件夹themes中出现主题
在本地启动个人博客 本地启动博客命令(tip:要在根目录执行这条命令)
hugo server -t m10c --buildDrafts  实际写一篇测试文章 hugo new post/test.md  对应的目录在
可以自行编辑这篇文章
在执行启动命令,对应的文章已经出现在博客上了
将个人博客部署到远端服务器上 打开git
hugo --theme=m10c --baseUrl=&amp;quot;https://mixuans.github.io/&amp;quot; --buildDrafts  在当前目录下生成一个public文件夹
后面需要将public提交到刚创建的仓库中
git init //初始化 git add * // 添加到本地仓库中 git commit -m &amp;quot;提交的注释&amp;quot; // 提交的远程仓库中  git remote add orign https://github.com/Mixuans/mixuans.github.io.git // 这个对应的规则 git remote add orgin https://github.</description>
    </item>
    
  </channel>
</rss>